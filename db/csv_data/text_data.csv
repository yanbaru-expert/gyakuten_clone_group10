genre,title,detail
Basic,Macのショートカットキー,"## Macのショートカットキー

パソコンになれてないなら、まずはショートカットキーから使えるようにしていきましょう。ここにあげてあるショートカットキーを使えないと、プログラミングの学習効率は全く上がらないです。

プログラマーなるなら必須中の必須なので、ぜひ使いこなせるようにしてください。絶対にこれだけは覚えて！というショートカットキーは以下の通り。

上書き保存

```
command + s
```

コピー

```
command + c
```

カット

```
command + x
```

ペースト

```
command + v
```

更新

```
command + r
```

新しいウインドウを開く（ブラウザ、テキストエディタなど）

```
command + t
```

新規で開く（ブラウザ、テキストエディタなど）

```
command + n
```

アプリの切り替え

```
shift + tab
```

## まとめ
パソコンの操作スピードを上げるためにも、ショートカットキーを活用することはとても重要になってきます。特に、コピー&ペーストや上書き保存は、ショートカットキーを使用するのとそうでないのでは大きな差が出てくるので、ぜひ使えるようにしておきましょう。"
Basic,Linuxコマンド,2
Basic,Slackを使用したいろんなマークダウン記法,3
Git,Gitの基本,"## Gitの基本
Gitとは、プログラムのソースコードなどの変更履歴を記録・追跡するためのバージョン管理システムのことです。バージョン管理とは、その名の通り、複数存在するソースコードのバージョンを管理することを指します。

このGitを使用することによって、変更履歴をさかのぼってソースコードを元の状態に戻す事ができ、複数人での共同開発も可能になります。

Gitでできること

チームでの共同開発をする上で、もはやGitは欠かせない存在となっています。

プログラマーというとコードを書いているイメージがあるかと思いますが、それ以前にGitなどのバージョン管理ツールが無ければ仕事になりません。ぜひ、ここで基礎を押さえておきましょう。

## Gitにおける開発の流れ
まずは基本的な用語から押さえておきましょう。

Gitがバージョン管理下におく場所を「リポジトリ」と言います。リポジトリには「ローカルリポジトリ」と「リモートリポジトリ」があります。

ローカルリポジトリは自分のパソコン内にあるリポジトリ、リモートリポジトリはネット上にあるリポジトリと覚えておきましょう。

リモートリポジトリに関しては、後ほど詳しくご説明いたします。

ユーザが変更の履歴を保存することをコミット（commit）と言います。

これはGitの持つ機能の中でも特によく使用するので、ぜひ覚えておいてください。

コミットは実行した順番で記録されるので、時系列に沿って変更履歴を追う事ができます。

そのため、過去にどういう変更を行ったのかを簡単に確認する事ができるのです。

また、コミットをする際にはコミットメッセージという形でメモを残す事ができます。

例えば、「デザインの変更をしました」とか「データベースへの登録処理を追加しました」といったメモを残す事ができるというわけです。それによって、より変更履歴の理解が容易になります。

複数人での開発を行う際は、この「コミット」と「コミットメッセージ」を利用し、誰がみても理解できるような変更履歴を作成し、任意の履歴に遡ることができるよう心がけましょう。

## gitの構成
詳細な説明に入る前に、まずはGitがファイルの状態を保存する場所についてご説明します。

実は、Gitにはファイルを保存するための場所がいくつかあります。その構成は以下の通りです。

ワーキングツリー（今作業しているファイルのある場所）
インデックス（コミットするためのファイルを登録する場所）
ローカルリポジトリ（リモートリポジトリに変更内容を送信するための場所）
リモートリポジトリ（複数人でファイルを共有するための場所）
同時並行で複数の開発を可能にする機能
Gitには、複数の開発を同時並行することができる機能があります。

例えば、Aさんはデータの登録を行う処理を実装し、Bさんはデータの表示形式を綺麗にするという実装をするとします。

そのとき、2人で同じファイルを編集すると、とても効率が悪くなります。

その問題を解決するための機能が「ブランチ」です。ブランチとは、文字通り開発を枝分かれさせる機能のことで、これを使用することによってAさんとBさんの開発を別々のものとして扱うことができます。

例）
Aさん　→ ブランチA
Bさん　→ ブランチB"
Git,Gitコマンド一覧,4
Ruby,入出力を行うためのメソッド一覧,5
